.program ws2812
.side_set 1

.wrap_target
bitloop:
    out x, 1       side 0 [2] ; Shift out next bit and pulse low for 2 cycles
    jmp !x do_zero side 1 [1] ; Branch on the bit we shifted out. Drive high for 1 cycle if 1
do_one:
    jmp  bitloop   side 1 [4] ; Continue driving high for 4 more cycles (total 5)
do_zero:
    jmp  bitloop   side 0 [4] ; Drive low for 4 more cycles (total 6)
.wrap

% c-sdk {
#include "hardware/clocks.h"

static inline void ws2812_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = ws2812_program_get_default_config(offset);
    
    // Set pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Set clock divider for timing
    float div = clock_get_hz(clk_sys) / 8000000.0;
    sm_config_set_clkdiv(&c, div);

    // Configure OUT shift register
    sm_config_set_out_shift(&c, false, true, 24);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Configure side-set pin
    sm_config_set_sideset_pins(&c, pin);
    
    // Configure special output behavior
    sm_config_set_out_special(&c, true, false, false);

    // Initialize and start PIO state machine
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}